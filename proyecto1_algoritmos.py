# -*- coding: utf-8 -*-
"""Proyecto1_Algoritmos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PSgf3wF6b3WsY3Of8-yodyOIa4B0H60S
"""

#Clase Nodo
class Nodo:
  def __init__(self, id):
    self.id = id
  def __str__(self):
      return str(self.id)
  def __eq__(self, otroNodo):
      return self.id == otroNodo.id

#Clase Arista
class Arista:
  def __init__(self, source, target):
    self.source = source
    self.target = target
    self.id = str(source)+' -> '+str(target)
  def __str__(self):
    return str(self.id)

#Clase Grafo
class Grafo:
  def __init__(self,id="grafo",dirigido=False, auto=False):
    self.id=id
    self.nodos={}
    self.aristas={}
    self.dirigido=dirigido
    self.auto=auto

  def agregar_nodo(self, id):
    nuevo_nodo = Nodo(id)
    self.nodos[nuevo_nodo.id]=nuevo_nodo

  def agregar_arista(self,source,target):
    try:
      nueva_arista = Arista(self.nodos[source],self.nodos[target])
      self.aristas[nueva_arista.id]=nueva_arista
    except:
      print('***Error - Checar que los nodos se hayan decalarado previamente!***')

  def totalNodos(self):
    return len(self.nodos)    

  def totalAristas(self):
    return len(self.aristas)

  def nodosConectados(self,nodo):
    nodos_conectados=[]
    for key, value in self.aristas.items():
      if(value.source == self.nodos[nodo]):
        nodos_conectados.append(str(value.target))
      if(not self.dirigido): #Si no es un grafo dirigido
        if(value.target==self.nodos[nodo]):
          nodos_conectados.append(str(value.source)) 

    return nodos_conectados

  def graphviz(self):
    contenido=''
    contenido+='digraph '+self.id+' {\n'
    if not self.dirigido:
      contenido+='edge [dir=none, color=purple3]\n'
    else:
       contenido+='edge [color=purple3]\n'

    for nodo in self.nodos: #imprimir nodos
      contenido+=str(nodo)+';\n'

    for key, value in self.aristas.items(): #imprimir aristas
      contenido+= value.id+';\n'

    contenido+='}'

    nombre_completo=self.id+'.gv'
    f = open(nombre_completo, "w")
    f.write(contenido)
    f.close()
    print('Arhivo Graphviz generado: '+nombre_completo)
  def display(self):
    print('---'+str(self.totalNodos())+' Nodos---')
    for nodo in self.nodos:
      print('nodo: '+ str(nodo))
    print('---'+str(self.totalAristas())+' Aristas---')
    for arista in self.aristas:
      print('arista: '+ str(arista))

grafo = Grafo(id='ejemplo2',dirigido=False,auto=False)

#            2
#           /
# 5 - 3 - 8 -  9 - 10 - 11
#  \    /
#     1

grafo.agregar_nodo(5)
grafo.agregar_nodo(3)
grafo.agregar_nodo(8)
grafo.agregar_nodo(1)
grafo.agregar_nodo(9)
grafo.agregar_nodo(2)
grafo.agregar_nodo(10)
grafo.agregar_nodo(11)
grafo.agregar_nodo(12)

grafo.agregar_arista(5,1)
grafo.agregar_arista(5,3)
grafo.agregar_arista(3,8)
grafo.agregar_arista(1,8)
grafo.agregar_arista(8,2)
grafo.agregar_arista(8,9)
grafo.agregar_arista(9,10)
grafo.agregar_arista(10,11)

grafo.graphviz()
grafo.display()

grafo.nodosConectados(8)

import graphviz
graphviz.Source.from_file(grafo.id+'.gv')

def grafoErdosRenyi(n, m, dirigido=False, auto=False):
  '''
  Genera grafo aleatorio con el modelo Erdos-Renyi
  :param n: número de nodos (> 0)
  :param m: número de aristas (>= n-1)
  :param dirigido: el grafo es dirigido?
  :param auto: permitir auto-ciclos?
  :return: grafo generado
  '''
  #Generar objeto grafo
  nombre='grafoErdosRenyi_n_'+str(n)+'_m_'+str(m)
  grafo = Grafo(nombre,dirigido,auto)

  #Generar n nodos
  for i in range(n):
    grafo.agregar_nodo(i)
  return grafo

#grafoErdosRenyi
gfErdosReny = grafoErdosRenyi(10, 5, dirigido=False, auto=False)
gfErdosReny.graphviz()
gfErdosReny.display()
